Consider the curve, which describes a, possibly rotated, parabola:

              ⎡a b⎤⎡u ⎤
  X(u) = P₀ + ⎣c d⎦⎣u²⎦                (1)

           ⎡a b⎤
where M' = ⎣c d⎦ has a determinant of 1 (det(M') = ad - cb = 1).

Note that X(0) = P₀ (by design) (writing t here instead of u,
see below; but of course t=0 <--> u=0).

     ╭─────────────────────────────────────────────╮
     │ We are in point P₀ of the parabola when t=0 │
     ╰─────────────────────────────────────────────╯

Lets investigate when the parabola is not rotated.

If b != 0 we can therefore write c=(ad-1)/b:

       ⎡a          b⎤
  M' = ⎣(ad-1)/b   d⎦,   det(M') = ad - b((ad-1)/b) = ad - (ad - 1) = 1.        (1a)

otherwise a must be non-zero and we can write d=1/a:

       ⎡a          0⎤
  M' = ⎣c        1/a⎦,   det(M') = a/a - 0c = 1                                 (1b)


Writing out (1a) as two equations, one for the x-coordinate
and one for the y-coordinate, we get:

  x(u) = Px₀ + (a u + b u²)                     (2)
  y(u) = Py₀ + ((ad-1)/b u + d u²)              (3)

Solving u from (2) gives:

  x(u) = Px₀ + a u + b u² --> b u² + a u + Px₀ - x = 0 -->

      -a +/- √(a² - 4 b (Px₀ - x))
  u = ---------------------------
                2 b
                           a +/- √(a² + 4b(x - Px₀))
  y = Py₀ + (d/b)(x - Px₀) + ------------------------
                                     2 b²

which is not an unrotated parabola (it does not have the form y = α x² + β x + γ).

Writing out (1b) as two equations:

  x(u) = Px₀ + a u                               (4)
  y(u) = Py₀ + c u + u²/a                        (5)

Solving u from (4) gives:

  u = (x - Px₀) / a
  y = Py₀ + c ((x - Px₀) / a) + ((x - Px₀) / a)² / a = 
    = (1/a³) x² + (c/a - 2Px₀/a³) x + (Py₀ - cPx₀/a + Px₀²/a³)

which *is* a general parabola. The derivative is:

  dy/dx = (2/a³) x + (c/a - 2Px₀/a³)

which is zero when x = (2Px₀/a³ - c/a) / (2/a³) = Px₀ - ca²/2


Introducing a "width" w = a^(3/2), and a "shift" v = -c/2 w^(1/3),
we can write for the unrotated parabola (1b) case:

      ⎡    w^(2/3)          0⎤
 M' = ⎣-2v w^(-1/3)  w^(-2/3)⎦

and

  x(u) = Px₀ +    w^(2/3)  u
  y(u) = Py₀ - 2v w^(-1/3) u + w^(-2/3) u²

If v=0 then P₀ corresponds to the vertex of the parabola (the
point where the curvature has its extreme). In this case

      ⎡   w^(2/3)          0⎤
 M' = ⎣         0   w^(-2/3)⎦

and

  x(u) = Px₀ + w^(2/3) u
  y(u) = Py₀ + w^(-2/3) u²

which, after eliminating u gives:

  u = (x(u) - Px₀) w^(-2/3)
  y(u) = Py₀ + w^(-2/3) ((x(u) - Px₀) w^(-2/3))² = Py₀ + w^(-2) (x(u) - Px₀)²

where the extreme is when the derivative is zero, thus

  dy/dx = 2 w^(-2) (x(u) - Px₀) = 0

which is clearly the case when x(u) = Px₀, which in turn is for u=0,
and thus y(u) = y(0) = Py₀.

     ╭───────────────────────────────────────────╮
     │ The vertex of the parabola is P₀ when v=0 │
     ╰───────────────────────────────────────────╯

For other values of v, the curve shifts along P₀, but does not change
shape (or rotation). Aka, the "width" stays the same.

The "width" w corresponds to the amount we have to add to the
x-coordinate (in the unrotated case) of the vertex in order to
change 1 unit in the y-coordinate.

Before showing that, lets first substitute u = w^(1/3) t.
This doesn't change anything - except the speed at which we travel
along the curve when the parameter u (and now t) changes: a bit
faster for wider parabola's.

This gives:
  x(u) = Px₀ + u (    w^(2/3)  +        0 u) = Px₀ +    w^(2/3)  u
  y(u) = Py₀ + u (-2v w^(-1/3) + w^(-2/3) u) = Py₀ - 2v w^(-1/3) u + w^(-2/3) u²

  x(t) = Px₀ +    w^(2/3)  (w^(1/3) t)                         = Px₀ + w t
  y(t) = Py₀ - 2v w^(-1/3) (w^(1/3) t) + w^(-2/3) (w^(1/3) t)² = Py₀ - 2v t + t²

Note that with this substitution we have

              ⎡w   0⎤⎡t ⎤
  X(t) = P₀ + ⎣-2v 1⎦⎣t²⎦

and the "unrotated" matrix,

        ⎡  w  0 ⎤
  M'' = ⎣ -2v 1 ⎦

no longer has a determinant of 1!

The derivate including v is therefore, using t = (x - Px₀)/w, and
y = Py₀ - 2v (x - Px₀)/w + ((x - Px₀)/w)²

  dy/dx = -2v/w + 2(x - Px₀)/w² = -2v/w + 2t/w = 2(t - v)/w

which is zero when t = v.

     ╭───────────────────────────────────────────────╮
     │ We are in the vertex of the parabola when t=v │
     ╰───────────────────────────────────────────────╯

For example, in the unrotated case, the vertex coordinates are

  x(v) = Px₀ +  w v
  y(v) = Py₀ - 2v v + v² = Py₀ - v²

If we fill in that x-coordinate plus w into the generate parabola
equation that we found:

  y = Py₀ - 2v ((Px₀ +  w v + w) - Px₀)/w + (((Px₀ +  w v + w) - Px₀)/w)² =
    = Py₀ - 2v (v + 1)                    + (v + 1)² =
    = Py₀ - 2v² - 2v + v² + 2v + 1 = Py₀ - v² + 1 = y(v) + 1

as it should be according to the definition of w.

     ╭──────────────────────────────────────────────────╮
     │ A line perpendicular to the symmetry line of     │
     │ the parabola, at a distance of 1 from the vertex,│
     │ crosses the parabola in two points that are at   │
     │ a distance of w from the symmetry line.          │
     ╰──────────────────────────────────────────────────╯


Let R be the rotation matrix

      ⎡cos(θ) -sin(θ)⎤
  R = ⎣sin(θ)  cos(θ)⎦

If we want to get a rotated parabola, rotating around P₀ because that point
has to stay on the curve of course, the curve equation could be replaced with:

  X'(t) = P₀ + R (X(t) - P₀) = P₀ + R (P₀ + t M [1 t] - P₀) = 
        = P₀ + t RM [1 t]

Thus, if we set M to RM'' then we have rotation around P₀ included.
We now have the matrix

      ⎡ w cos(θ) + 2v sin(θ)    -sin(θ) ⎤
  M = ⎣ w sin(θ) - 2v cos(θ)     cos(θ) ⎦

The functions x(t) and y(t) written out then become:

  x(t) = Px₀ + (w cos(θ) + 2v sin(θ)) t - sin(θ) t²
  y(t) = Py₀ + (w sin(θ) - 2v cos(θ)) t + cos(θ) t²

This curve passes through P₀ when t = 0.
If we want it to pass through a point P₁ when t = 1:

  Px₁ = x(1) = Px₀ + (w cos(θ) + 2v sin(θ)) - sin(θ)
  Py₁ = y(1) = Py₀ + (w sin(θ) - 2v cos(θ)) + cos(θ)

then

  Px₁ - Px₀ = w cos(θ) - (1 - 2v) sin(θ)
  Py₁ - Py₀ = w sin(θ) + (1 - 2v) cos(θ)

  Let d = sqrt(w² + (1 - 2v)²)

         +
        /|
       / |
      /  |
    d/   |1-2v
    /    |
   /     |
  / α    |
 +-------+
     w

  1 - 2v = d sin(α)
       w = d cos(α)

  Px₁ - Px₀ = d (cos(α)cos(θ) - sin(α)sin(θ)) = d cos(θ + α)
  Py₁ - Py₀ = d (cos(α)sin(θ) + sin(α)cos(θ)) = d sin(θ + α)

  (Py₁ - Py₀)/(Px₁ - Px₀) = tan(θ + α)

  |P₁ - P₀| = sqrt((Px₁ - Px₀)² + (Py₁ - Py₀)²) = d

Lets say we want to keep v the same, then in order for the
curve to go through P₁ at t=1, we must tune w such that
w² + (1 - 2v)² = d² = |P₁ - P₀|²

  w = sqrt((Px₁ - Px₀)² + (Py₁ - Py₀)² - (1 - 2v)²)

which might not always be possible if |v| is too large, or
the points are too close.

A better way to look this relationship is that P₀ and P₁
are w apart in the direction perpendicular to the symmetry
line of the parabola - and a distance 1 - 2v in the direction
parallel to the symmetry line.

Most notable, when v=0 then P₀ is the vertex and P₁ lays
at a distance of precisely w from the symmetry line; while
when v=1 then P₁ is the vertex and P₀ lays at a distance
of precisely w from the symmetry line.

Lets say that Y is the unit vector that points along the
direction of the symmetry line towards the side that the
parabola goes to infinity, and X is Y rotated 90 degrees
clockwise:

  X = [cos(θ), sin(θ)]
  Y = [-sin(θ), cos(θ)]

Let P₀P₁ be the vector from P₀ to P₁, then

     ╭─────────────────╮
     │ P₀P₁⋅X = w      │
     │ P₀P₁⋅Y = 1 - 2v │ (iff s=1, see below.)
     ╰─────────────────╯

This means that for a fixed P₀, P₁ and rotation θ,
both w and v are known, and hence the complete
parabola. This can't be right because normally for
a -say- unrotated parabola we can choose three
arbitrary points - not only two.

Setting θ=0 and v=0.5 we have an "upright" parabola
with P₀ and P₁ at the same height (y-coordinate)
left and right of the symmetry line. I want to stick
to that. But, with the current formula also the width
w of the parabola is given: namely the distance between
P₀ and P₁. We can introduce scale factor s that scales
the "horizontal" distance between P₀ and P₁ such that

  |P₀P₁| = sw

The equation for this unrotated parabola is:

  y(x) = ax² + bx + c, where we assume a > 0 (otherwise set θ=π).

The derivative

  dy/dx = 2ax + b, is zero when x = -b/(2a).

Hence, the vertex is (-b/(2a), a(-b/(2a))² + b(-b/(2a)) + c) = (-b/(2a), c - b²/(4a))

Then w can be deduced from its definition that y(-b/(2a) +/- w) = c - b²/(4a) + 1.
From this is follows that w = 1/√a (or -1/√a, but we assume w > 0), in other
words a = 1/w².

In order to find out the new matrix (including s) it shouldn't matter
if we apply a translation: lets put the vertex in the origin for now.
Then b=c=0 and the full equation of the parabola becomes y = (x/w)².

We learned before that x(t) is linear in t (for the unrotated case),
and with v=0.5 (making their y-coordinates equal) we know that the
x-coordinate of P₀ (at t=0) is going to be -sw/2 and the x-coordinate
of P₁ is going to be sw/2, so that they are sw apart. In other words:

  x(t) = -sw/2 + swt

and the y-coordinate of P₁/P₀ is

  Py = (+/-(sw/2)/w)² = s²/4

Hence,

  y(t) = (x(t)/w)² = ((-sw/2 + swt)/w)² = (t - 1/2)²s² = s²/4 - s²t + s²t²

From this we can see that the matrix for the unrotated parabola with v=1/2
(the translation has no influence on the matrix) is,

        ⎡ sw  0 ⎤
        ⎣ -s² s²⎦

and it seems likely that for arbitrary v that is going to be

        ⎡  sw  0 ⎤
  M'' = ⎣-2vs² s²⎦

Lets verify that this is correct:

That matrix gives us the equations

  x(t) = Px₀ + sw t                                     (6)
  y(t) = Py₀ - 2vs² t + s² t²                           (7)

As P₁ is defined as the point at t=1, we therefore have also

  Px₁ = Px₀ + sw
  Py₁ = Py₀ - 2vs² + s²

Lets calculate the vertex point from (6) and (7):

  t = (x - Px₀) / sw
  y = Py₀ - 2vs² ((x - Px₀) / sw) + s² ((x - Px₀) / sw)²

with derivative

  dy/dx = -2vs² / sw + 2s² ((x - Px₀) / sw) / sw =
        = -2vs/w + 2(x - Px₀)/w²

Setting to zero (using w > 0) gives

  x = Px₀ + vsw

This correctly gives x = Px₀ when v=0, as well
as x = Px₀ + sw = Px₁ when v=1.

We can reintroduce rotation around P₀ by setting

             ⎡ sw cos(θ) + 2vs² sin(θ)     -s² sin(θ) ⎤
  M = RM'' = ⎣ sw sin(θ) - 2vs² cos(θ)      s² cos(θ) ⎦

Now we have to do the same exercise as before, but this time
with s included.

The functions x(t) and y(t) written out have become:

     ╭─────────────────────────────────────────────────────────╮
     │ x(t) = Px₀ + (sw cos(θ) + 2vs² sin(θ)) t - s² sin(θ) t² │
     │ y(t) = Py₀ + (sw sin(θ) - 2vs² cos(θ)) t + s² cos(θ) t² │
     ╰─────────────────────────────────────────────────────────╯

This curve passes through P₀ when t = 0.
If we want it to pass through a point P₁ when t = 1:

  Px₁ = x(1) = Px₀ + (sw cos(θ) + 2vs² sin(θ)) - s² sin(θ)
  Py₁ = y(1) = Py₀ + (sw sin(θ) - 2vs² cos(θ)) + s² cos(θ)

then

  Px₁ - Px₀ = sw cos(θ) - s²(1 - 2v) sin(θ)
  Py₁ - Py₀ = sw sin(θ) + s²(1 - 2v) cos(θ)

  Let d = sqrt(s²w² + s⁴(1 - 2v)²)

         +
        /|
       / |
      /  |
    d/   |s²(1-2v)
    /    |
   /     |
  / α    |
 +-------+
    sw

  s²(1 - 2v) = d sin(α)
          sw = d cos(α)

  Px₁ - Px₀ = d (cos(α)cos(θ) - sin(α)sin(θ)) = d cos(θ + α)
  Py₁ - Py₀ = d (cos(α)sin(θ) + sin(α)cos(θ)) = d sin(θ + α)

     │ P₀P₁⋅X = w      │
     │ P₀P₁⋅Y = 1 - 2v │ (iff s=1, see below.)

  (Py₁ - Py₀)/(Px₁ - Px₀) = tan(θ + α)

  |P₁ - P₀| = sqrt((Px₁ - Px₀)² + (Py₁ - Py₀)²) = d

In other words, the relationship between s, w, v and the
distance between P₀ and P₁ has become:
  
     ╭────────────────────────────────────╮
     │ P₀P₁⋅X = sw         = |P₀P₁|cos(α) │             (8)
     │ P₀P₁⋅Y = s²(1 - 2v) = |P₀P₁|sin(α) │             (9)
     ╰────────────────────────────────────╯

See Relationship_between_P0_P1_theta_w_v_and_s.png
for an overview of the variables discussed so far.

The introduction of P₁, with the demand that P₁ = X(1)
hence restricts the choice of curves; we no longer can
choose freely a set of six variables (Px₀, Py₀, θ, v, w, s;
where 0 <= θ < 2π, w > 0 and s > 0) each giving a unique
curve, because a lot of those won't pass through P₁,
or do but not when t=1.

For example we can use (Px₀, Py₀, Px₁, Py₁, α, s) instead.
Using (8) w = |P₀P₁|cos(α) / s, and
using (9) v = (1 - |P₀P₁|sin(α) / s²) / 2.
Whereas θ = atan2(Py₁ - Py₀, Px₁ - Px₀) - α, which can
best be understood by looking at the png mentioned above.

---

Let Pᵦ be a point that is generated by t = β < 0.

  Pxᵦ = x(β) = Px₀ + (sw cos(θ) + 2vs² sin(θ)) β - s² sin(θ) β²
  Pyᵦ = y(β) = Py₀ + (sw sin(θ) - 2vs² cos(θ)) β + s² cos(θ) β²

